//
//  ViewController.swift
//  Firestore Demo
//
//  Created by Taijaun Pitt on 14/03/2023.
//

import UIKit
import FirebaseFirestore
import FirebaseCore

class ViewController: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        let db = Firestore.firestore()
        
        
        
    }
}
    
    // MARK: - Adding data
    // Adding a document with a specific ID
    
    //db.collection("users").document("userid123").setData(["firstname":"Tom", "lastname":"Bee", "age":25])
    
    // Add a document with an autogenerated id
    //db.collection("users").addDocument(data: ["firstname":"Bob", "lastname":"Joe", "age":25])
    
    // Adding a document with an autogenerated id, while getting a reference to the id
    /*let myNewDoc = db.collection("users").document()
     myNewDoc.setData(["fisrtname":"Sarah", "lastname":"Jones", "age":26, "id":myNewDoc.documentID])
     db.collection("allergies").document(myNewDoc.documentID).setData(["allergies":"peanuts"])*/
    
    /* Activity 1
     db.collection("games").addDocument(data: ["name":"Super Mario World", "platform":"Super Nintendo", "genre":"Platformer"]) /
     
     / Activity 2
     db.collection("games").document("tetris").setData(["name":"Tetris", "platform":"Nintendo", "genre":"Puzzle"]) /
     
     / Activity 3
     db.collection("consoles").document("snes").setData(["name":"Super Nintendo Entertainment System", "company":"Nintendo"]) /
     
     / Activity 4
     db.collection("consoles").document("nes").setData(["name":"Nintendo Entertainment System", "company":"Nintendo"]) */
    
    // MARK: - updating data
    
    /*
     db.collection("games").document("Super Mario World").setData(["platform":"SNES", "rating":"E", "year":"1990"], merge: true)
     
     db.collection("consoles").document("snes").updateData(["name":"Super NES", "units":"49 million", "year":"1990"])
     */
    
    // MARK: - deleting data
    
    // Deleting a document
    
    //db.collection("users").document("zDHd6GrYeoL1fTZ1JkJY").delete()
    // Delete a specific field from your document
    //db.collection("users").document("userid123").updateData(["gender":FieldValue.delete()])
    
    // MARK: - handling errors
    
    // Handling errors
    //db.collection("users").addDocument(data: [:]) { error in
    // This code is run after the operation is complete
    // check the error parameter for errors
    //if error == nil {
    // Operation completed successfully
    //} else {
    // There was an error
    
    //}
    //}
    
    
    // MARK: - Reading data
    
    // Reading a single document
    /*
     db.collection("users").document("userid123").getDocument { docSnapshot, error in
     
     // Check for errors
     if error == nil && docSnapshot != nil && docSnapshot!.data() != nil {
     
     // Have no errors, we have a snapshot, and we have data
     print(docSnapshot!.data())
     }
     } */
    
    // Reading a collection of documents
    /*
     db.collection("users").getDocuments { querySnapshot, error in
     
     if error == nil && querySnapshot != nil {
     // There's no error and snapshot isn't nil
     
     // Get the collection of documents
     for document in querySnapshot!.documents {
     print(document.documentID)
     }
     }
     } */
    
    /*
     db.collection("consoles").document("nes").getDocument { docSnapshot, error in
     
     if error == nil && docSnapshot != nil && docSnapshot!.data() != nil {
     print(docSnapshot!.data()!)
     }
     }
     
     db.collection("games").getDocuments { querySnapshot, error in
     
     if error == nil && querySnapshot != nil {
     for document in querySnapshot!.documents {
     print(document.documentID)
     }
     }
     } */
    
    // MARK: - Pushed based reading
// Listening for changes in a single document
/* updates automatically whenever the database is updated (display changes in the ui absed on data)
 let listener = db.collection("users").document("userid123").addSnapshotListener { docSnapshot, error in
 
 if error == nil && docSnapshot != nil && docSnapshot!.data() != nil {
 
 // have no errors, we have snapshot, and we have data
 print(docSnapshot!.data()!)
 }
 
 }  Remove the listener when done
 listener.remove()
 */

// Listening for changes in a collection
/*
let listener = db.collection("users").addSnapshotListener { querySnapshot, error in
    
    // Check for errors
    if error == nil && querySnapshot != nil {
        
        // Loop through changed cos
        for change in querySnapshot!.documentChanges {
            print(change.document.documentID)
        }
        
    }
    
    
}
*/
    

